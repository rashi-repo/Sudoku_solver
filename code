# sudoku_solver.py
def print_board(board):
    for row in board:
        print(" ".join(str(num) for num in row))
    print()  # Add a newline for better readability

def find_empty(board):
    for r in range(9):
        for c in range(9):
            if board[r][c] == 0:
                return r, c
    return None

def valid(board, num, row, col):
    # Check row
    if num in board[row]:
        return False
    # Check column
    if num in (board[r][col] for r in range(9)):
        return False
    # Check 3x3 box
    box_row, box_col = row // 3 * 3, col // 3 * 3
    for r in range(box_row, box_row + 3):
        for c in range(box_col, box_col + 3):
            if board[r][c] == num:
                return False
    return True

def solve(board):
    empty = find_empty(board)
    if not empty:
        return True  # Solved
    row, col = empty

    for num in range(1, 10):
        if valid(board, num, row, col):
            board[row][col] = num
            if solve(board):
                return True
            board[row][col] = 0  # Backtrack

    return False

def main():
    # Initialize an empty board
    board = [[0] * 9 for _ in range(9)]

    print("Enter the Sudoku puzzle row by row (use 0 for empty cells):")
    for r in range(9):
        while True:
            try:
                row_input = input(f"Row {r + 1}: ")
                row_numbers = list(map(int, row_input.split()))
                if len(row_numbers) != 9 or any(num < 0 or num > 9 for num in row_numbers):
                    raise ValueError
                board[r] = row_numbers
                break
            except ValueError:
                print("Please enter exactly 9 numbers (0-9) separated by spaces.")

    print("\nInitial Sudoku board:")
    print_board(board)

    if solve(board):
        print("Solved Sudoku board:")
        print_board(board)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    main()
